---
description: 
globs: 
alwaysApply: false
---
# 🛠️ Cursor IDE Rule: Implement Feature Flag with VWO FME SDK

## 🎯 Trigger Condition

When the prompt contains any of the following phrases:

- "implement a feature"
- "feature flag"
- "gate a feature"
- "toggle a feature"
- "control access to a feature"
- and "similar texts for feature flagging"

---

## ⏭️ Skip Condition

If the prompt contains:

- "already created"
- "already implemented"
- "existing feature flag"

Get all feature flag details using tool and check for the matching feature flag and then **skip to the integration steps**.

---

## ❓ Clarifying Question

Prompt the user:

> Would you like to use the **VWO FME SDK** to implement this feature flag?

If the user confirms, create the feature flag.
Once MCP tool is done, ask If the user want to provide variation value for given variable.

---

## 🎯 User Response Condition
If user wants to add a new variation value, then use tool.

## 🎯 User Response Condition (after variation creation)
After a new variation is added:

1. **Attach Metric Step (Required):**
   - Prompt the user:
     > Would you like to select an existing metric or create a new one to attach to this feature flag?
   
   - If user chooses to **use available metrics**:
     - Fetch all available metrics using the tool.
     - If there are available metrics:
       - Prompt the user to select which metric they want to use and update the feature-flag.
     - If no available metrics are found:
       - Inform the user that no metrics are available and prompt them to create a new metric.
   
   - If user chooses to **create a new metric**:
     - Ask the user for the name of the new metric.
     - update the metric to the feature-flag.

   - This step is compulsory; the user must attach one metric before proceeding.

2. **Rule Creation Loop:**

   Enter a loop for each rule type in sequence:

   1. **Rollout Rules:**
      - Prompt: > Would you like to create a rollout rule for this feature flag? (e.g., gradual rollout)
      - If yes: Fetch environment list using tool, ask for environment to use, ask for rule details, create the rule, ask if the rule should be enabled, and repeat this step.
      - If no: Move to Testing/Personalize Rules.

   2. **Testing/Personalize Rules:**
      - Loop: Prompt: > Would you like to create a testing or personalize rule for this feature flag? (e.g., A/B test or targeting specific users)
      - If yes: Ask which type (testing or personalize), get details, create the rule, ask if the rule should be enabled, and repeat this step.
      - If no: Ask If feature flag should be enabled to start using the feature, if the user confirms then toggle the feature flag using tool.

## 🔧 Integration Steps

### 1. Install SDK
If not already installed, provide an option to run the following commands:

```bash
# via npm
npm install vwo-fme-react-sdk --save

# via yarn
yarn add vwo-fme-react-sdk
```

---

### 2. Setup VWOProvider in your React app

```tsx
import React from 'react';
import { VWOProvider, IVWOOptions, IVWOContextModel } from 'vwo-fme-react-sdk';

const vwoConfig: IVWOOptions = {
  sdkKey: 'YOUR_VWO_SDK_KEY',      // Replace with your SDK key
  accountId: 'YOUR_VWO_ACCOUNT_ID',// Replace with your Account ID
  logger: { level: 'debug' },      // Optional for debugging
};

const userContext: IVWOContextModel = {
  id: 'unique_user_id',            // Unique user ID
};

const fallbackComponent = <div>Loading feature flags...</div>;

const App = () => (
  <VWOProvider config={vwoConfig} userContext={userContext} fallbackComponent={fallbackComponent}>
    <YourFeatureComponent />
  </VWOProvider>
);

export default App;

```

> 🔁 Replace `VWO_ACCOUNT_ID`, `VWO_SDK_KEY` and `unique_user_id` with actual values.

---

### 3. Use the useGetFlag hook to check feature flag status in your component

```tsx
import React from 'react';
import { useGetFlag } from 'vwo-fme-react-sdk';

const YourFeatureComponent = () => {
  // Replace 'feature_key' with your feature flag key configured in VWO
  const { flag, isReady } = useGetFlag('feature_key');

  if (!isReady) {
    return <div>Loading feature state...</div>;
  }

  if (flag.isEnabled()) {
    return <div>The feature is ENABLED for you!</div>;
  } else {
    return <div>The feature is disabled. Showing fallback UI.</div>;
  }
};

export default YourFeatureComponent;

```

> 🧠 Customize `feature_key` appropriately.

### 4. Optional: Access feature flag variables
If your flag has variables, you can get them like this, but please ensure that you don't use this hook inside any if condition:

```tsx
import { useGetFlagVariable } from 'vwo-fme-react-sdk';

const YourFeatureComponent = () => {
  const { flag, isReady } = useGetFlag('feature_key');

  if (!isReady) return <div>Loading...</div>;

  // Get variable value, e.g. a string variable with key 'button_color', fallback to 'blue'
  const buttonColor = useGetFlagVariable(flag, 'variable_key', 'default_value');

  return <button style={{ backgroundColor: buttonColor }}>Click Me</button>;
};

```

> Replace `feature_key`, `variable_key` and `default_value` with appropriate values.

### 5. Optional: Track custom events

```tsx
import { useTrackEvent } from 'vwo-fme-react-sdk';

const YourFeatureComponent = () => {
  const { trackEvent, isReady } = useTrackEvent();

  if (!isReady) return null;

  const handleClick = () => {
    const eventProperties = { prop1: 'value1'};
    trackEvent('event_name', eventProperties);
  };

  return <button onClick={handleClick}>Click Me</button>;
};

```

> Replace `event_name` and `eventProperties` with actual values.

### 7. Optional: `setAttribute`

```tsx
import { useSetAttribute } from 'vwo-fme-react-sdk';

const YourFeatureComponent = () => {
  const { setAttribute, isReady } = useSetAttribute();

  if (!isReady) return null;

  const handleClick = () => {
    const atrributes = { attribute1: 'value1'};
    setAttribute(atrributes);
  };

  return <button onClick={handleClick}>Click Me</button>;
};

```

> Replace attributes with a key-value user attributes.

---

## 📚 Documentation

Refer to the official SDK docs for advanced usage:
👉 @https://developers.vwo.com/v2/docs/fme-react-install#/

---

Refer to the official SDK documentation for details on usage and parameters.
Use below GitHub repositories based and thier corresponding official documentation

1. For Node.js / JavaScript projects:
  - GitHub - https://github.com/wingify/vwo-fme-react-sdk
  - Project README - https://github.com/wingify/vwo-fme-react-sdk/blob/master/README.md
  - Official Documentation - https://developers.vwo.com/v2/docs/fme-react-install